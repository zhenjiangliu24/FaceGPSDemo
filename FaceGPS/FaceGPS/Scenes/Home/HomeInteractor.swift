//
//  HomeInteractor.swift
//  FaceGPS
//
//  Created by Zhenjiang Liu on 2018-09-08.
//  Copyright (c) 2018 zhenjiang. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic
{
    func requestLocationPermission(request: Home.RequestLocationPermission.Request)
    func subscribLocation(request: Home.SubscribContinuousLocation.Request)
    func removeAllLocations(request: Home.RemoveAllLocations.Request)
}

protocol HomeDataStore
{
    //var name: String { get set }
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore
{
    var presenter: HomePresentationLogic?
    var worker: HomeWorker?
    var locationsWorker = LocationStoreWorker(store: DBWorker())
    
    // MARK: business logic
    
    func requestLocationPermission(request: Home.RequestLocationPermission.Request)
    {
        worker = HomeWorker()
        worker?.requestPermission()
        
        let response = Home.RequestLocationPermission.Response()
        presenter?.presentRequestLocation(response: response)
    }
    
    func subscribLocation(request: Home.SubscribContinuousLocation.Request)
    {
        worker?.subscribeContinuousLocation(onUpdate: { [weak self] (loc) in
            let location = loc.toLocation()
            self?.locationsWorker.createLocation(locationToCreate: location, complete: { result in
                switch result {
                case .Success(let location):
                    // TODO:
                    let response = Home.SubscribContinuousLocation.Response(locations: [location], error: nil)
                    self?.presenter?.presentContinuousLocationUpdate(response: response)
                case .Failure(let error):
                    // TODO: 
                    let response = Home.SubscribContinuousLocation.Response(locations: [], error: error)
                    self?.presenter?.presentContinuousLocationUpdate(response: response)
                }
            })
        }, onFail: { (error, location) in
            
        })
    }
    
    func removeAllLocations(request: Home.RemoveAllLocations.Request)
    {
        locationsWorker.detectAllLocations { [weak self] result in
            switch result {
            case.Success(result: let locations):
                let response = Home.RemoveAllLocations.Response(removedCount: locations.count)
                self?.presenter?.presentRemoveAllLocations(response: response)
            case .Failure(error: let error):
                let response = Home.RemoveAllLocations.Response(removedCount: 0)
                self?.presenter?.presentRemoveAllLocations(response: response)
            }
        }
    }
}
