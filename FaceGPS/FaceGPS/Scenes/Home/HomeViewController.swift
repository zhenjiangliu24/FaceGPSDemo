//
//  HomeViewController.swift
//  FaceGPS
//
//  Created by Zhenjiang Liu on 2018-09-08.
//  Copyright (c) 2018 zhenjiang. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class
{
    func displayLocationPermission(viewModel: Home.RequestLocationPermission.ViewModel)
    func displayContinuousLocationUpdate(viewModel: Home.SubscribContinuousLocation.ViewModel)
    func displayRemoveAllLocations(viewModel: Home.RemoveAllLocations.ViewModel)
}

class HomeViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, HomeDisplayLogic
{
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    var locations: [Location] = []
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    @IBOutlet weak var tableView: UITableView!
    // MARK: IBActions
    @IBAction func startFaceDetectionButtonTapped(_ sender: UIButton) {
        
    }
    
    func registerCellTypes(_ types: [BaseTableViewCell.Type]) {
        tableView.registerCellTypes(types)
    }
    
    // MARK: UITableViewDelegate
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return locations.count
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    // MARK: UITableViewDataSource
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: LocationTableViewCell.cellType, for: indexPath)
        if let cell = cell as? LocationTableViewCell {
            cell.configCell(location: locations[indexPath.row])
        }
        return cell
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return LocationTableViewCell.cellHeight
    }
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        setupTableview()
        
        registerCellTypes([LocationTableViewCell.self])
        
        requestLocationPermission()
        
        listenToLocationChange()
        
        //setupLocationObserver()
    }
    
    func setupTableview()
    {
        tableView.delegate = self
        tableView.dataSource = self
        
        // TODO: remove me
        removeAllLocations()
    }
    
    // MARK: Location action
    
    func requestLocationPermission()
    {
        let request = Home.RequestLocationPermission.Request()
        interactor?.requestLocationPermission(request: request)
    }
    
    func listenToLocationChange()
    {
        let request = Home.SubscribContinuousLocation.Request()
        interactor?.subscribLocation(request: request)
    }
    
    func removeAllLocations()
    {
        let request = Home.RemoveAllLocations.Request()
        interactor?.removeAllLocations(request: request)
    }
    
    // MARK: HomeDisplayLogic
    func displayLocationPermission(viewModel: Home.RequestLocationPermission.ViewModel)
    {
    }
    
    func displayContinuousLocationUpdate(viewModel: Home.SubscribContinuousLocation.ViewModel)
    {
        locations.append(contentsOf: viewModel.locations)
        tableView.reloadData()
    }
    
    func displayRemoveAllLocations(viewModel: Home.RemoveAllLocations.ViewModel)
    {
        
    }
}
