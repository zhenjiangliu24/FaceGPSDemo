//
//  FaceDetectionViewController.swift
//  FaceGPS
//
//  Created by Zhenjiang Liu on 2018-09-08.
//  Copyright (c) 2018 zhenjiang. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FaceDetectionDisplayLogic: class
{
    func displayCapture(viewModel: FaceDetection.SetUpFaceCaptureSession.ViewModel)
    
    func displayPrepareVision(viewModel: FaceDetection.PrepareVision.ViewModel)
}

class FaceDetectionViewController: UIViewController, FaceDetectionDisplayLogic
{
    var interactor: FaceDetectionBusinessLogic?
    var router: (NSObjectProtocol & FaceDetectionRoutingLogic & FaceDetectionDataPassing)?
    
    @IBOutlet weak var previewView: UIView!
    
    // Layer UI for drawing Vision results
    var rootLayer: CALayer?
    var detectionOverlayLayer: CALayer?
    var detectedFaceRectangleShapeLayer: CAShapeLayer?
    var detectedFaceLandmarksShapeLayer: CAShapeLayer?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Orientation
    // Ensure that the interface stays locked in Portrait.
    override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
        return .portrait
    }
    
    // Ensure that the interface stays locked in Portrait.
    override var preferredInterfaceOrientationForPresentation: UIInterfaceOrientation {
        return .portrait
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = FaceDetectionInteractor()
        let presenter = FaceDetectionPresenter()
        let router = FaceDetectionRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        setupCaptureSession()
        
        setupVision()
        
        startCapture()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        stopCapture()
    }
    
    
    // MARK: Set up capture session
    
    func setupCaptureSession()
    {
        let request = FaceDetection.SetUpFaceCaptureSession.Request(preview: previewView)
        interactor?.setupCapture(request: request)
    }
    
    func setupVision()
    {
        let request = FaceDetection.PrepareVision.Request()
        interactor?.setupVision(request: request)
    }
    
    func startCapture()
    {
        let request = FaceDetection.startFaceCaptureAndDetection.Request()
        interactor?.startCapture(request: request)
    }
    
    func stopCapture()
    {
        let request = FaceDetection.stopFaceCaptureAndDection.Request()
        interactor?.stopCapture(request: request)
    }
    
    // MARK: FaceDetectionDisplayLogic
    
    func displayCapture(viewModel: FaceDetection.SetUpFaceCaptureSession.ViewModel)
    {
        rootLayer = viewModel.rootLayer
    }
    
    func displayPrepareVision(viewModel: FaceDetection.PrepareVision.ViewModel) {
        detectionOverlayLayer = viewModel.detectionOverlayLayer
        detectedFaceRectangleShapeLayer = viewModel.detectedFaceRectangleShapeLayer
        detectedFaceLandmarksShapeLayer = viewModel.detectedFaceLandmarksShapeLayer
    }
}
